plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "3.5.0.2730"
	id 'jacoco'
}

group = 'br.com.tecnoride'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation "org.hamcrest:hamcrest:2.2"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation "org.testcontainers:testcontainers:1.17.6"
	testImplementation "org.testcontainers:junit-jupiter:1.17.6"
	testImplementation "org.testcontainers:postgresql:1.17.6"
}


tasks.named('test') {
	useJUnitPlatform()
}

//tasks.withType(Test).configureEach {
//	description = 'Runs the unit tests.'
//	group = 'verification'
//	useJUnitPlatform({
//		excludeTags 'integrationTest'
//	})
//}
//
//tasks.register('integrationTest', Test) {
//	description = 'Runs the integration tests.'
//	group = 'verification'
//	useJUnitPlatform {
//		includeTags 'integrationTest'
//	}
//}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

sonar {
	properties {
		property "sonar.projectKey", "tecno-ride"
		property "sonar.qualitygate.wait", true
		property "sonar.host.url", "http://localhost:9001"
		property "sonar.login", System.getenv("SONAR_TOKEN")
	}
}
